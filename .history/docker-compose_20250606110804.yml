version: '3.8'

services:
  # 后端API服务
  api:
    build: .
    container_name: quit-journey-api
    ports:
      - "8080:8080"
      - "5005:5005"  # 调试端口
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/quitjourney
      - SPRING_DATASOURCE_USERNAME=quitjourney_user
      - SPRING_DATASOURCE_PASSWORD=quitjourney_pass
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=redis_password
      - JWT_SECRET=quit-journey-docker-secret-key-change-in-production-2024
      - JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - quit-journey-network

  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: quit-journey-db
    environment:
      - POSTGRES_DB=quitjourney
      - POSTGRES_USER=quitjourney_user
      - POSTGRES_PASSWORD=quitjourney_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quitjourney_user -d quitjourney"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - quit-journey-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: quit-journey-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - quit-journey-network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: quit-journey-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - quit-journey-network

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# 网络
networks:
  quit-journey-network:
    driver: bridge
